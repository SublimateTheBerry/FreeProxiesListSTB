import os
import asyncio
import aiohttp

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
PROXY_SOURCES = os.getenv("PROXY_SOURCES", "").split(",")  # –°–ø–∏—Å–æ–∫ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –ø—Ä–æ–∫—Å–∏
PROXY_TIMEOUT = 5  # –¢–∞–π–º–∞—É—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–∫—Å–∏ (—Å–µ–∫)
TEST_URL = "http://google.com"  # –°–∞–π—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏

# –§–∞–π–ª—ã –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
OUTPUT_FILES = {
    "ALL": "All.txt",
    "HTTP": "HTTP.txt",
    "HTTPS": "HTTPS.txt",
    "SOCKS4": "Socks4.txt",
    "SOCKS5": "Socks5.txt",
}


async def fetch_proxies():
    """–°–æ–±–∏—Ä–∞–µ—Ç –ø—Ä–æ–∫—Å–∏ —Å–æ –≤—Å–µ—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤."""
    proxies = set()
    async with aiohttp.ClientSession() as session:
        tasks = []
        for url in PROXY_SOURCES:
            url = url.strip()
            if url:
                tasks.append(download_proxies(session, url))
        
        results = await asyncio.gather(*tasks)
        for res in results:
            proxies.update(res)

    return list(proxies)


async def download_proxies(session, url):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–∫—Å–∏ —Å –æ–¥–Ω–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞."""
    try:
        async with session.get(url, timeout=10) as response:
            if response.status == 200:
                return set(response.text.strip().split("\n"))
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ {url}: {e}")
    return set()


async def check_proxy(session, proxy):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –ø—Ä–æ–∫—Å–∏."""
    proxy_types = {
        "HTTP": f"http://{proxy}",
        "HTTPS": f"https://{proxy}",
        "SOCKS4": f"socks4://{proxy}",
        "SOCKS5": f"socks5://{proxy}",
    }

    for ptype, purl in proxy_types.items():
        proxies = {"http": purl, "https": purl}
        try:
            async with session.get(TEST_URL, proxy=proxies["http"], timeout=PROXY_TIMEOUT) as response:
                if response.status == 200:
                    print(f"‚úÖ –†–∞–±–æ—á–∏–π {ptype} –ø—Ä–æ–∫—Å–∏: {proxy}")
                    return ptype, proxy
        except:
            pass

    print(f"‚ùå –ü—Ä–æ–∫—Å–∏ {proxy} –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç.")
    return None, None


async def sort_and_save_proxies(proxies):
    """–°–æ—Ä—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ–∫—Å–∏ –ø–æ —Ç–∏–ø–∞–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ —Ñ–∞–π–ª—ã."""
    sorted_proxies = {key: set() for key in OUTPUT_FILES.keys()}
    
    async with aiohttp.ClientSession() as session:
        tasks = [check_proxy(session, proxy) for proxy in proxies]
        results = await asyncio.gather(*tasks)

    for ptype, proxy in results:
        if ptype and proxy:
            sorted_proxies["ALL"].add(proxy)
            sorted_proxies[ptype].add(proxy)

    for key, filename in OUTPUT_FILES.items():
        with open(filename, "w") as f:
            f.write("\n".join(sorted_proxies[key]))
    
    print("‚úÖ –ü—Ä–æ–∫—Å–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")


async def main():
    print("üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Å–±–æ—Ä –∏ –ø—Ä–æ–≤–µ—Ä–∫—É –ø—Ä–æ–∫—Å–∏...")
    proxies = await fetch_proxies()
    await sort_and_save_proxies(proxies)
    print("üéâ –ì–æ—Ç–æ–≤–æ!")


if __name__ == "__main__":
    asyncio.run(main())
